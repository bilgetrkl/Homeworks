(defconstant +kw-token+ 'keyword)
(defconstant +op-token+ 'operator)
(defconstant +int-token+ 'valuei)
(defconstant +frac-token+ 'valuef)
(defconstant +id-token+ 'identifier)
(defconstant +comment-token+ 'comment)
(defconstant +unknown-token+ 'error)

(defparameter *keywords* '(("and" . kw_and) ("or" . kw_or) ("not" . kw_not) ("equal" . kw_equal) ("less" . kw_less) 
                           ("nil" . kw_nil) ("list" . kw_list) ("append" . kw_append) ("concat" . kw_concat) 
                           ("set" . kw_set) ("deffun" . kw_deffun) ("for" . kw_for) ("if" . kw_if) ("exit" . kw_exit) 
                           ("load" . kw_load) ("print" . kw_disp) ("true" . kw_true) ("false" . kw_false)))

(defparameter *operators* '(("+" . op_plus) ("-" . op_minus) ("/" . op_div) ("*" . op_mult) ("(" . op_op)
                            (")" . op_cp) ("," . op_comma)))

(defun char-type (char)
      (cond ((digit-char-p char) :digit) ((alpha-char-p char) :alpha)
            ((char= char #\_) :underscore) ((char= char #\;) :comment) 
            ((find char '(#\Space #\Tab #\Newline)) :whitespace)
            ((find char  '(#\+ #\- #\* #\/ #\( #\) #\,)) :operator)
            (t :unknown)))

(defun tokenize (input)
      (let ((tokens '()) (current-token "") (state :start))
            (flet ((add-token (type value) 
                        (push (list :type type :value value) tokens)))
                  (loop for char across input do 
                        (let ((ctype (char-type char)))
                             (ecase state
                                    (:start 
                                          (cond ((eq ctype :comment) (add-token +comment-token+ input) (return))
                                                ((eq ctype :alpha) (setf state :identifier current-token (string char)))
                                                ((eq ctype :digit) (setf state :integer current-token (string char)))
                                                ((eq ctype :operator)
                                                      (let ((op (cdr (assoc (string char) *operators* :test #'string=))))
                                                           (add-token +op-token+ op)))
                                                ((eq ctype :whitespace) nil)
                                                (t (setf current-token (concatenate 'string current-token (string char))) 
                                                      (add-token +unknown-token+ (string char)) (setf state :start current-token "") (return))))
                                    (:identifier
                                          (cond ((or (eq ctype :alpha) (eq ctype :digit) (eq ctype :underscore))
                                                      (setf current-token (concatenate 'string current-token (string char))))
                                                ((eq ctype :operator)
                                                      (add-token (if (assoc current-token *keywords* :test #'string=) +kw-token+ +id-token+) current-token)
                                                      (let ((op (cdr (assoc (string char) *operators* :test #'string=))))
                                                            (add-token +op-token+ op))
                                                      (setf state :start current-token ""))
                                                ((eq ctype :whitespace) (add-token (if (assoc current-token *keywords* :test #'string=) +kw-token+ +id-token+) current-token)
                                                      (setf state :start current-token ""))
                                                (t (setf current-token (concatenate 'string current-token (string char))) 
                                                      (add-token +unknown-token+ current-token) (setf state :start current-token "") (return))))
                                    (:integer
                                          (cond ((eq ctype :digit) (setf current-token (concatenate 'string current-token (string char))))
                                                ((char= char #\f) (setf state :fraction current-token (concatenate 'string current-token (string char))))
                                                ((eq ctype :operator) (add-token +int-token+ current-token)
                                                      (let ((op (cdr (assoc (string char) *operators* :test #'string=)))) 
                                                            (add-token +op-token+ op)) (setf state :start current-token ""))
                                                ((eq ctype :whitespace) (add-token +int-token+ current-token) (setf state :start current-token ""))
                                                (t (setf current-token (concatenate 'string current-token (string char))) 
                                                      (add-token +unknown-token+ current-token) (setf state :start current-token "")(return))))
                                    (:fraction
                                          (cond ((eq ctype :digit)  (setf current-token (concatenate 'string current-token (string char))))
                                                ((eq ctype :operator) (add-token +frac-token+ current-token)
                                                      (let ((op (cdr (assoc (string char) *operators* :test #'string=))))
                                                            (add-token +op-token+ op)) (setf state :start current-token ""))
                                                ((eq ctype :whitespace) (add-token +frac-token+ current-token) (setf state :start current-token ""))
                                                (t (setf current-token (concatenate 'string current-token (string char))) 
                                                      (add-token +unknown-token+ current-token) (setf state :start current-token "") (return)))))))
                  (reverse tokens))))

(defun process-lines (lines)
      (loop for line in lines
            for line-number = 1 then (1+ line-number)
                  do (dolist (token (tokenize line))
             (let ((type (getf token :type))
                   (value (getf token :value)))
                  (cond ((eq type +kw-token+)
                         (let ((keyword-symbol (cdr (assoc value *keywords* :test #'string=))))
                              (format t "~A~%" (string-upcase (string keyword-symbol)))))
                        ((eq type +op-token+) (format t "~A~%" value))
                        ((eq type +unknown-token+) (format t "SYNTAX_ERROR: ~A at line ~A~%" value line-number))
                        (t (format t "~A~%" type)))))))

(defun gppinterpreter (&optional filename)
      (if filename
            (if (probe-file filename)
                  (with-open-file (stream filename)
                        (let (lines)
                             (loop for line = (read-line stream nil) while line do
                                    (push line lines))
                              (process-lines (reverse lines))))
                  (format t "Error: File ~A not found.~%" filename))
            (progn
                  (format t "Enter a line to lex (':quit' to exit):~%")
                  (loop for line = (read-line *standard-input* nil)
                        while (and line (not (string= line ":quit"))) do
                              (process-lines (list line))))))

(gppinterpreter)
;(gppinterpreter "input.gpp")
